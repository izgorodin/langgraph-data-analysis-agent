[tool.poetry]
name = "langgraph-data-analysis-agent"
version = "0.1.0"
description = "Production-ready data analysis agent using LangGraph, BigQuery, and Gemini/Bedrock LLMs"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.11"
langgraph = "^0.2.0"
langchain = "^0.3.0"
langchain-core = "^0.3.0"
langchain-google-vertexai = "^2.0.0"
langchain-aws = "^0.2.0"
google-cloud-bigquery = "^3.25.0"
pydantic = "^2.8.0"
pydantic-settings = "^2.4.0"
pandas = "^2.2.0"
sqlglot = "^25.0.0"
click = "^8.1.0"
rich = "^13.7.0"
structlog = "^24.1.0"
tenacity = "^9.0.0"
httpx = "^0.27.0"
aiofiles = "^24.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-cov = "^5.0.0"
pytest-asyncio = "^0.24.0"
pytest-mock = "^3.14.0"
black = "^24.8.0"
isort = "^5.13.0"
flake8 = "^7.1.0"
mypy = "^1.11.0"
bandit = "^1.7.0"
safety = "^3.2.0"
pre-commit = "^3.8.0"
sphinx = "^8.0.0"
sphinx-rtd-theme = "^2.0.0"

[tool.poetry.group.test.dependencies]
pytest-xdist = "^3.6.0"
pytest-benchmark = "^4.0.0"
faker = "^28.1.0"
factory-boy = "^3.3.0"
responses = "^0.25.0"

[tool.poetry.scripts]
lgda = "src.cli:main"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "google.cloud.bigquery.*",
    "sqlglot.*",
    "langgraph.*",
    "langchain.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow running tests",
    "requires_credentials: Tests that need real API credentials",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
